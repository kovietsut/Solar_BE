name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/solar_be

jobs:
  # Continuous Integration
  test:
    name: Test Application
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: solar_test_db
          MYSQL_USER: solar_test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run db:generate

      - name: Push database schema
        run: npm run db:push
        env:
          DATABASE_URL: mysql://solar_test_user:test_password@localhost:3306/solar_test_db

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit
        env:
          DATABASE_URL: mysql://${{ secrets.TEST_DB_USER }}:${{ secrets.TEST_DB_PASSWORD }}@localhost:3306/${{ secrets.TEST_DB_NAME }}
          JWT_SECRET: ${{ secrets.TEST_JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.TEST_JWT_REFRESH_SECRET }}
          ENCRYPTION_KEY: test_encryption_key
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: mysql://solar_test_user:test_password@localhost:3306/solar_test_db
          JWT_SECRET: test_jwt_secret
          JWT_REFRESH_SECRET: test_refresh_secret
          ENCRYPTION_KEY: test_encryption_key
          NODE_ENV: test
          CI: true

      - name: Run e2e tests
        run: npm run test:e2e
        env:
          DATABASE_URL: mysql://solar_test_user:test_password@localhost:3306/solar_test_db
          JWT_SECRET: test_jwt_secret
          JWT_REFRESH_SECRET: test_refresh_secret
          ENCRYPTION_KEY: test_encryption_key
          NODE_ENV: test
          CI: true

  # Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify image exists
        run: |
          echo "Scanning image: ${{ needs.build.outputs.image }}"
          if ! docker manifest inspect ${{ needs.build.outputs.image }}; then
            echo "Warning: Image not found in registry. This may be expected if the build failed."
            echo "Skipping security scan as image is not available."
            exit 0
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ needs.build.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Production
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          # Create SSH directory and key
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add VPS to known hosts
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Create deployment directory
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p ${{ secrets.DEPLOY_PATH }}"

      - name: Copy deployment files to VPS
        run: |
          scp docker-compose.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.DEPLOY_PATH }}/
          scp Dockerfile ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.DEPLOY_PATH }}/
          scp package.json ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.DEPLOY_PATH }}/
          scp package-lock.json ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.DEPLOY_PATH }}/
          scp tsconfig.json ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.DEPLOY_PATH }}/
          scp tsconfig.build.json ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.DEPLOY_PATH }}/
          scp nest-cli.json ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.DEPLOY_PATH }}/ || echo "nest-cli.json not found, skipping"
          scp .dockerignore ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.DEPLOY_PATH }}/ || echo ".dockerignore not found, skipping"
          scp production.env.template ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.DEPLOY_PATH }}/
          scp -r nginx ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.DEPLOY_PATH }}/
          scp -r scripts ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.DEPLOY_PATH }}/
          scp -r src ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.DEPLOY_PATH }}/

      - name: Setup SSL and Docker Authentication
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Stop system nginx if running (to avoid port conflicts)
            echo "Checking for system nginx conflicts..."
            if sudo systemctl is-active nginx >/dev/null 2>&1; then
              echo "System nginx is running, stopping it to avoid port conflicts..."
              sudo systemctl stop nginx
              sudo systemctl disable nginx
            else
              echo "No system nginx conflict detected"
            fi
            
            # Login to GitHub Container Registry
            echo "Logging into GitHub Container Registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Create SSL directory
            echo "Setting up SSL certificates..."
            mkdir -p nginx/ssl
            
            # Generate self-signed SSL certificate (for development/testing)
            # In production, replace with real certificates from Let's Encrypt or your CA
            if [ ! -f nginx/ssl/cert.pem ] || [ ! -f nginx/ssl/key.pem ]; then
              echo "Generating self-signed SSL certificate..."
              openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                -keyout nginx/ssl/key.pem \
                -out nginx/ssl/cert.pem \
                -subj "/C=US/ST=State/L=City/O=Organization/CN=${{ secrets.VPS_HOST }}"
              chmod 600 nginx/ssl/key.pem
              chmod 644 nginx/ssl/cert.pem
              echo "SSL certificate generated successfully"
            else
              echo "SSL certificates already exist"
            fi
          EOF

      - name: Deploy to VPS
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Create .env file from secrets
            echo "Creating .env file..."
            cat > .env << 'ENVEOF'
            DATABASE_URL=mysql://${{ secrets.MYSQL_USER }}:${{ secrets.MYSQL_PASSWORD }}@mysql:3306/${{ secrets.MYSQL_DATABASE }}
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
            JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
            JWT_REFRESH_EXPIRES_IN=${{ secrets.JWT_REFRESH_EXPIRES_IN }}
            NODE_ENV=production
            DOCKER_REGISTRY=${{ env.REGISTRY }}/
            DOCKER_IMAGE_NAME=${{ env.IMAGE_NAME }}
            DOCKER_TAG=${{ github.sha }}
            ENCRYPTION_KEY=production_encryption_key_32_chars
            COMPOSE_PROJECT_NAME=solar
            ENVIRONMENT_SUFFIX=_prod
            RESTART_POLICY=always
            LOG_MAX_SIZE=10m
            LOG_MAX_FILE=3
            HTTP_PORT=80
            HTTPS_PORT=443
          ENVEOF
            
            # Debug environment variables
            echo "=== Environment Variables Check ==="
            source .env
            echo "DOCKER_REGISTRY: ${DOCKER_REGISTRY}"
            echo "DOCKER_IMAGE_NAME: ${DOCKER_IMAGE_NAME}"
            echo "DOCKER_TAG: ${DOCKER_TAG}"
            echo "Full image name will be: ${DOCKER_REGISTRY}${DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
            echo "Checking if .env file was created:"
            ls -la .env
            echo "First few lines of .env:"
            head -5 .env
            
            # Check build context files
            echo "=== Build Context Check ==="
            echo "Files in deployment directory:"
            ls -la
            echo "TypeScript config files:"
            ls -la tsconfig*.json nest-cli.json 2>/dev/null || echo "Some config files missing"
            echo "Source files:"
            ls -la src/ || echo "src/ directory not found"
            
            # Pull latest images (with fallback to build)
            echo "Pulling latest images..."
            docker-compose pull || echo "Pull failed, will build locally if needed"
            
            # Check Docker and network connectivity
            echo "=== Docker and Network Diagnostics ==="
            echo "Docker version:"
            docker --version || echo "Docker not available"
            echo "Docker daemon status:"
            docker info --format '{{.ServerVersion}}' || echo "Docker daemon not running"
            echo "Network connectivity test:"
            curl -I https://registry-1.docker.io/v2/ --max-time 10 || echo "Docker registry not reachable"
            echo "DNS resolution test:"
            nslookup registry-1.docker.io || echo "DNS resolution failed"
            
            # Try to configure Docker to prefer IPv4 and add registry mirrors
            echo "Configuring Docker for IPv4 preference and registry mirrors..."
            sudo mkdir -p /etc/docker
            cat << 'DOCKER_CONFIG' | sudo tee /etc/docker/daemon.json
            {
              "ip6tables": false,
              "ipv6": false,
              "registry-mirrors": [
                "https://mirror.gcr.io"
              ],
              "insecure-registries": [],
              "dns": ["8.8.8.8", "8.8.4.4"]
            }
            DOCKER_CONFIG
            sudo systemctl restart docker || echo "Failed to restart Docker daemon"
            sleep 10
            
            # Clear Docker build cache to ensure fresh build with new files
            echo "Clearing Docker build cache..."
            docker builder prune -f || echo "Failed to clear build cache, continuing..."
            
            # Verify all required build files are present
            echo "=== Final Build Files Verification ==="
            echo "Required files check:"
            for file in tsconfig.json tsconfig.build.json package.json Dockerfile; do
              if [ -f "$file" ]; then
                echo "✓ $file exists"
              else
                echo "✗ $file MISSING"
              fi
            done
            echo "Build context size:"
            du -sh . || echo "Cannot calculate directory size"
            
            # Stop existing services
            echo "Stopping existing services..."
            docker-compose down
            
            # Pre-pull base images with retries to avoid build failures
            echo "Pre-pulling base images..."
            for i in {1..3}; do
              echo "Attempt $i: Pulling node:24-alpine..."
              if docker pull node:24-alpine; then
                echo "Successfully pulled node:24-alpine"
                break
              else
                echo "Failed to pull node:24-alpine (attempt $i/3)"
                if [ $i -eq 3 ]; then
                  echo "All pull attempts failed, will try to build anyway..."
                fi
                sleep 10
              fi
            done
            
            # Start services with fresh build (force rebuild to avoid cache issues)
            echo "Starting services with fresh build..."
            docker-compose up -d --build
            
            # Wait for services to start
            echo "Waiting for services to start..."
            sleep 10
            
            # Check what's running
            echo "=== Services Status After Start ==="
            docker-compose ps
            
            # Check logs if services failed
            echo "=== Docker Compose Logs ==="
            docker-compose logs --tail=50 || echo "No logs available"
            
            # If no containers running, try to start them manually with verbose output
            if [ $(docker-compose ps -q | wc -l) -eq 0 ]; then
              echo "=== No containers running, attempting manual start with verbose output ==="
              docker-compose up --no-start
              echo "=== Trying to start services one by one ==="
              docker-compose start mysql && echo "MySQL started" || echo "MySQL failed to start"
              sleep 5
              docker-compose start app && echo "App started" || echo "App failed to start"  
              sleep 5
              docker-compose start nginx && echo "Nginx started" || echo "Nginx failed to start"
              echo "=== Final status after manual start ==="
              docker-compose ps
            fi
            
            # Run database migrations
            docker-compose exec -T app npm run db:migrate
            
            # Seed production data if needed
            docker-compose exec -T app npm run db:seed:prod
            
            # Clean up old images
            docker image prune -f
          EOF

      - name: Verify deployment
        run: |
          sleep 30
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd ${{ secrets.DEPLOY_PATH }}
            
            echo "=== Final Container Status ==="
            docker-compose ps
            
            echo "=== Port Usage Check ==="
            sudo netstat -tulpn | grep :80 || echo "Port 80 not in use"
            sudo netstat -tulpn | grep :443 || echo "Port 443 not in use"
            sudo netstat -tulpn | grep :3306 || echo "Port 3306 not in use"
            
            echo "=== System Services Check ==="
            sudo systemctl status nginx --no-pager || echo "System nginx not running"
            sudo systemctl status apache2 --no-pager || echo "Apache not running"
            
            echo "=== Docker Compose Logs (All Services) ==="
            docker-compose logs --tail=30
            
            echo "=== Docker Images Available ==="
            docker images | grep -E "(solar|mysql|nginx)" || echo "No relevant images found"
            
            echo "=== Environment Variables ==="
            echo "DOCKER_REGISTRY: ${DOCKER_REGISTRY}"
            echo "DOCKER_IMAGE_NAME: ${DOCKER_IMAGE_NAME}"
            echo "DOCKER_TAG: ${DOCKER_TAG}"
            
            echo "=== Docker Compose Configuration Check ==="
            docker-compose config --quiet && echo "Docker Compose config is valid" || echo "Docker Compose config has errors"
            
            echo "=== .env File Contents ==="
            head -10 .env || echo ".env file not found"
            
            echo "=== Docker System Info ==="
            docker system df
            docker version --format '{{.Server.Version}}' || echo "Docker daemon not running"
          EOF

      - name: Health check
        run: |
          # Check if containers are running first
          echo "Checking container status..."
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd ${{ secrets.DEPLOY_PATH }}
            echo "=== Container Status ==="
            docker-compose ps
            echo ""
            echo "=== Application Logs (last 20 lines) ==="
            docker-compose logs --tail=20 app || echo "No app logs available"
            echo ""
            echo "=== Network Check ==="
            docker-compose exec -T app curl -f http://localhost:3000/health 2>/dev/null && echo "Internal health check: OK" || echo "Internal health check: FAILED"
          EOF

          # Wait for application to be ready
          echo "Checking external health endpoint..."
          for i in {1..10}; do
            if curl -f http://${{ secrets.VPS_HOST }}/health 2>/dev/null; then
              echo "Application is healthy!"
              exit 0
            elif curl -f http://${{ secrets.VPS_HOST }}:3000/health 2>/dev/null; then
              echo "Application is healthy on port 3000!"
              exit 0
            elif curl -f http://${{ secrets.VPS_HOST }} 2>/dev/null; then
              echo "Application is responding on root path (no /health endpoint)"
              exit 0
            fi
            echo "Waiting for application to be ready... ($i/10)"
            sleep 15
          done
          echo "Application health check failed - but deployment may still be successful"
          exit 0

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Notify deployment status
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ needs.deploy.result == 'success' && 'success' || 'failure' }}
          title: 'Deployment Status'
          description: ${{ needs.deploy.result == 'success' && 'Solar BE successfully deployed to production! 🚀' || needs.deploy.result == 'failure' && 'Solar BE deployment to production failed! ❌' || needs.deploy.result == 'cancelled' && 'Solar BE deployment was cancelled ⏹️' || needs.deploy.result == 'skipped' && 'Solar BE deployment was skipped ⏭️' || 'Solar BE deployment status unknown ⚠️' }}
          color: ${{ needs.deploy.result == 'success' && '0x00ff00' || needs.deploy.result == 'failure' && '0xff0000' || '0xffff00' }}
          username: 'GitHub Actions'
          avatar_url: 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png'
